"
"   ~/.config/vim/vimrc
"
"


""""""""""""""""""
" respect xdg spec
"

set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"


""""""""""""""""""
" general settings
"

set history=1000                        " sets how many lines of history vim has to remember
filetype plugin on                      " enable filetype plugins
"filetype indent on                      " enable filetype indent
set autoread                            " set to auto read when a file is changed from the outside
let mapleader = ","                     " With a map leader it's possible to do extra key combinations
let g:mapleader = ","                   " like <leader>w saves the current file
nmap <leader>w :w!<cr>                  " fast saving - ,w
command W w !sudo tee % > /dev/null     " :W sudo saves the file


"""""""""""""
" ui settings
"

set so=7                                " set 7 lines to the cursor when moving vertically using j/k
set ruler                               " always show current position
set number                              " show line numbers
set cmdheight=2                         " height of the command bar
set hid                                 " a buffer becomes hidden when it is abandoned
set backspace=eol,start,indent          " configure backspace
set whichwrap+=<,>,h,l                  " wrap backspace
set ignorecase                          " ignore case when searching
set smartcase                           " when searching try to be smart about cases
set hlsearch                            " highlight search results
set incsearch                           " makes search act like search in modern browsers
set lazyredraw                          " don't redraw while executing macros (good performance config)
set magic                               " for regular expressions turn magic on
set showmatch                           " show matching brackets
set mat=2                               " blink for 0.2s
set noerrorbells                        " no sound on errors
set novisualbell
set t_vb=
set tm=500

if has('mouse')                         " enable mouse support
  set mouse=a
endif


"""""""""""""""""
" colour settings
"

syntax enable                           " enable syntax highlighting
set background=dark                     " use dark colourscheme
set encoding=utf8                       " set utf8 as standard encoding
set ffs=unix,dos,mac                    " use unix as the standard file type


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and indent related
"

set expandtab                           " use spaces instead of tabs
set smarttab                            " be smart when using tabs
set shiftwidth=4                        " 1 tab == 4 spaces
set tabstop=4
"set ai                                  " auto indent
"set si                                  " smart indent
set wrap                                " wrap lines


"""""""""""""
" status line
"

" always show the status line
set laststatus=2

" format the status line
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l


""""""""""""""""""""""""""""""
" => Visual mode related
"

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"

" Remap VIM 0 to first non-blank character
map 0 ^

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


"""""""""""""""
" misc settings
"

noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm      " Remove the Windows ^M - when the encodings gets messed up
map <leader>q :e ~/buffer<cr>                           " Quickly open a buffer for scribble
map <leader>x :e ~/buffer.md<cr>                        " Quickly open a markdown buffer for scribble
map <leader>pp :setlocal paste!<cr>                     " Toggle paste mode on and off

